<Project Sdk="Microsoft.NET.Sdk.Worker">

	<!-- Set defines: Windows, Linux, macOS and/or Arm64. This is needed in some files! -->
	<Import Project="../../SDK/NET/Common.targets" />

	<!-- Common properties -->
	<PropertyGroup>
		<Name>ObjectDetection (YOLO .Net)</Name>
		<RootNamespace>CodeProject.AI.Modules.ObjectDetection.YOLOv5</RootNamespace>
		<AssemblyName>ObjectDetectionYOLOv5Net</AssemblyName>
		<Version>1.4</Version>
		<Nullable>enable</Nullable>
		<ImplicitUsings>disable</ImplicitUsings>
		<UserSecretsId>dotnet-CodeProject.AI.Yolo-384BE45C-AAED-42BA-9DDB-EF37356B630F</UserSecretsId>
		<ApplicationIcon>favicon.ico</ApplicationIcon>
		<!--<GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>-->
		<Authors>CodeProject</Authors>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<GeneratePackageOnBuild>False</GeneratePackageOnBuild>
		<BaseOutputPath></BaseOutputPath>
		<TargetFramework>net7.0</TargetFramework>
		<AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
		<!-- Doesn't appear to actually do what's on the label
		<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
		-->
	</PropertyGroup>

	<!-- Common Release properties -->
	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<SelfContained>false</SelfContained>
		<DebugType>none</DebugType>
		<DebugSymbols>false</DebugSymbols>
		<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
		<WarningsAsErrors />
		<!--<PublishSingleFile>true</PublishSingleFile>-->
	</PropertyGroup>

	<!-- Common Debug properties -->
	<PropertyGroup Condition="'$(Configuration)'=='Debug'">
		<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
		<WarningsAsErrors />
		<NoWarn>1701;1702;</NoWarn>
		<DebugType>portable</DebugType>
		<DebugSymbols>true</DebugSymbols>
	</PropertyGroup>
	
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
	  <DefineConstants>$(DefineConstants);</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
	  <DefineConstants>$(DefineConstants);</DefineConstants>
	</PropertyGroup>

	<Choose>
		<When Condition="!$(DefineConstants.Contains('CPU')) and !$(DefineConstants.Contains('GPU_CUDA')) and !$(DefineConstants.Contains('GPU_DIRECTML')) and !$(DefineConstants.Contains('GPU_OPENVINO')) and !$(DefineConstants.Contains('GPU_MPS'))">
			<!-- If no GPU type was specified then we'll apply a best-guess given the OS,
				 with the understanding that the GPU_CUDA will fallback to CPU if no CUDA
				 is available. This will apply to Release and Debug, but when we build our
				 Release packages we'll be specifying a GPUType so this block won't be used -->
			<PropertyGroup>
				<GpuType>CPU</GpuType>
				<GpuType Condition="'$(IsWindows)'=='true'">DirectML</GpuType>						<!-- Windows -->
				<GpuType Condition="'$(IsLinux)'=='true' And '$(IsArm64)'!='true'">CUDA</GpuType>	<!-- Linux -->
				<GpuType Condition="'$(IsLinux)'=='true' And '$(IsArm64)'=='true'">CPU</GpuType>	<!-- Raspberry Pi, Orange Pi, Radxa ROCK, Jetson -->
				<GpuType Condition="'$(IsOsx)'=='true' And '$(IsArm64)'!='true'">CPU</GpuType>		<!-- Mac Intel -->
				<GpuType Condition="'$(IsOsx)'=='true' And '$(IsArm64)'=='true'">MPS</GpuType>		<!-- Mac Apple Silicon -->
			</PropertyGroup>
		</When>
		<Otherwise>
			<!-- A GPU type was specified, so use it (but carefully) -->
			<PropertyGroup>
				<GpuType>CPU</GpuType>
				<GpuType Condition="$(DefineConstants.Contains('GPU_DIRECTML'))">DirectML</GpuType>
				<GpuType Condition="$(DefineConstants.Contains('GPU_CUDA'))">CUDA</GpuType>
				<GpuType Condition="$(DefineConstants.Contains('GPU_OPENVINO'))">OpenVINO</GpuType>
				<GpuType Condition="$(DefineConstants.Contains('GPU_MPS'))">MPS</GpuType>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<PropertyGroup>
		<RestoreAdditionalProjectSources Condition="'$(GpuType)'=='OpenVINO'">./LocalNugets</RestoreAdditionalProjectSources>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.ML.OnnxRuntime" Version="1.16.3" Condition="'$(GpuType)'=='CPU'" />
		<PackageReference Include="Microsoft.ML.OnnxRuntime.Gpu" Version="1.16.3" Condition="'$(GpuType)'=='CUDA'" />
		<PackageReference Include="Microsoft.ML.OnnxRuntime.OpenVino" Version="1.13.1-dev-20221026-1209-861125ccb" Condition="'$(GpuType)'=='OpenVINO'" />
		<PackageReference Include="Microsoft.ML.OnnxRuntime.DirectML" Version="1.16.3" Condition="'$(GpuType)'=='DirectML'" />
		<PackageReference Include="Microsoft.ML.OnnxRuntime" Version="1.16.3" Condition="'$(GpuType)'=='MPS'" />

		<!-- https://github.com/microsoft/onnxruntime/issues/12677#issuecomment-1443802719 -->
		<PackageReference Include="Microsoft.AI.DirectML" Version="1.13.0" Condition="'$(GpuType)'=='DirectML'" />

		<PackageReference Include="SkiaSharp" Version="2.88.6" />
		<PackageReference Include="Microsoft.Extensions.Hosting" Version="7.0.0" />
	</ItemGroup>

	<!-- Output the settings based on what we've determined above -->
	<Target Name="SettingsCheck" AfterTargets="BeforeBuild">
		<Message Importance="High" Text="       $(Name): Building for hardware $(GpuType)" />
	</Target>

	<PropertyGroup>
		<DefineConstants Condition="'$(GpuType)'=='CPU'">CPU</DefineConstants>
		<DefineConstants Condition="'$(GpuType)'=='CUDA'">CUDA</DefineConstants>
		<DefineConstants Condition="'$(GpuType)'=='OpenVINO'">OpenVINO</DefineConstants>
		<DefineConstants Condition="'$(GpuType)'=='DirectML'">DirectML</DefineConstants>
	</PropertyGroup>

	<PropertyGroup>
		<PlatformTarget Condition="'$(GpuType)'=='CPU'">AnyCPU</PlatformTarget>
		<PlatformTarget Condition="'$(GpuType)'=='CUDA'">AnyCPU</PlatformTarget>
		<PlatformTarget Condition="'$(GpuType)'=='OpenVINO'">AnyCPU</PlatformTarget>
		<PlatformTarget Condition="'$(GpuType)'=='DirectML'">x64</PlatformTarget>
		<FileVersion>2.1.5</FileVersion>
	</PropertyGroup>

	<ItemGroup>
	  <Content Include="favicon.ico" />
	  <Content Update="explore.html" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\..\SDK\NET\NET.csproj" />
	</ItemGroup>

	<!-- These make the downloadable exe's huge. The installers will pull down
	     these files from S3, so this isn't needed
		 
	<ItemGroup>
	  <None Update="assets\yolov5l.onnx">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </None>
	  <None Update="assets\yolov5m.onnx">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </None>
	  <None Update="assets\yolov5n.onnx">
	    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
	  </None>
	  <None Update="assets\yolov5s.onnx">
	    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
	  </None>
	</ItemGroup>

	<ItemGroup>
	  <None Update="custom-models\ipcam-animal.onnx">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </None>
	  <None Update="custom-models\ipcam-combined.onnx">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </None>
	  <None Update="custom-models\ipcam-dark.onnx">
	    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
	  </None>
	  <None Update="custom-models\ipcam-general.onnx">
	    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
	  </None>
	  <None Update="custom-models\ipcam-plate.onnx">
	    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
	  </None>
	</ItemGroup>
	-->

	<!--
	<Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="'$(Configuration)'== 'Release'">
	  <Exec Command="echo building ObjectDetectionYOLOv5Net-$(GpuType)-$(Version).zip&#xD;&#xA;cd $(ProjectDir)bin\$(Configuration)&#xD;&#xA;tar -c -z -f ObjectDetectionYOLOv5Net-$(GpuType)-$(Version).zip .\net7.0&#xD;&#xA;cd $(ProjectDir)" />
	</Target>
	-->

</Project>
